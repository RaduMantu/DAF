#!/bin/bash

# startup.sh - launch scrip for CVE demo application
#   $1 : [required] "client" starts a client that connects to ip:port $2
#                   "server" starts a server listening on port $2
#   $2 : [required] target ip:port for client, listening port for server
#
# NOTE: this should be executed as Docker entrypoint

################################################################################
############################### CONFIG VARIABLES ###############################
################################################################################

# these certificates should have been generated with prepare.sh
# prior to `docker build`
CERT_DIR=/root/certs

# install directory for vulnerabile openssl
# NOTE: rpath set at link time for openssl binary
OPENSSL_BINDIR=/root/vuln-openssl/bin

# ANSI color escape codes
ANSI_RED='\033[31m'
ANSI_GREEN='\033[32m'
ANSI_YELLOW='\033[33m'
ANSI_BLUE='\033[34m'
ANSI_CLR='\033[0m'

################################################################################
############################### HELPER FUNCTIONS ###############################
################################################################################

# print_sha - display the SHA256 of objects associated to given ELF
#   $1 : [required] path to ELF
print_sha () {
    printf "Objects comprising ${ANSI_BLUE}%s${ANSI_CLR}\n" $1

    for obj in $1 $(ldd $1 | grep '=>' | awk '{print $3}'); do
        printf "    %-40s -- ${ANSI_GREEN}%s${ANSI_CLR}\n" \
               ${obj} $(sha256sum ${obj} | awk '{print $1}')
    done
}

################################################################################
############################## SCRIPT ENTRY POINT ##############################
################################################################################

case $1 in
    client)
        print_sha ${OPENSSL_BINDIR}/openssl

        # no need to send any data
        # certificate validation is the issue here
        ${OPENSSL_BINDIR}/openssl s_client    \
            -connect     $2                   \
            -chainCAfile ${CERT_DIR}/ca.pem   \
            -cert        ${CERT_DIR}/leaf.pem \
            -key         ${CERT_DIR}/leaf.key

        ;;
    server)
        print_sha ${OPENSSL_BINDIR}/openssl

        ${OPENSSL_BINDIR}/openssl s_server   \
            -accept     $2                   \
            -cert       ${CERT_DIR}/leaf.pem \
            -key        ${CERT_DIR}/leaf.key \
            -cert_chain ${CERT_DIR}/ca.pem   \
            -verify 2

        ;;
    *)
        # for debugging purposes
        exec /bin/bash
esac

